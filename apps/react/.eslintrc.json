{
  "extends": [
    "../../.eslintrc.json",
    "plugin:react/jsx-runtime"
  ],
  "ignorePatterns": ["!**/*"],
  "parserOptions": {
    "project": ["apps/react/tsconfig.*?.json"]
  },
  "rules": {
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/member-ordering": "off",
    "@typescript-eslint/naming-convention": "off",
    "import/prefer-default-export": "off",
    "class-methods-use-this": "off",
    "max-classes-per-file": "off",
    "react/prop-types": "off",
    "max-len": ["warn", 120],
    "no-param-reassign": [
      "error",
      {
        "props": true,
        "ignorePropertyModificationsFor": ["state"]
      }
    ],
    "arrow-parens": ["error", "as-needed"],
    "react/function-component-definition": ["warn", {
      "namedComponents": "arrow-function"
    }],
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
    "jsdoc/require-param": [
      "error",
      {
        "checkDestructuredRoots": false
      }
    ]
  },
  "overrides": [
    {
      "files": ["**/*.tsx"],
      "rules": {
        "no-restricted-syntax": [
          "error",
          {
            "selector": "TSInterfaceDeclaration[id.name=/Props$/] TSPropertySignature[readonly=undefined]",
            "message": "Missing readonly modifier."
          },
          {
            "selector": "TSInterfaceDeclaration[id.name=/Props$/] TSPropertySignature TSTypeAnnotation[typeAnnotation.type=TSArrayType]",
            "message": "Missing readonly type modifier for array."
          },
          {
            "selector": "TSTypeReference[typeName.name='FC'] TSTypeReference[typeName.name!=/Props$/]",
            "message": "Prefer name with `Props` ending for the component's props interface"
          }
        ]
      }
    },
    {
      "files": ["**/*.tsx", "**/*.ts"],
      "rules": {
        "@nrwl/nx/enforce-module-boundaries": [
          "error",
          {
            "enforceBuildableLibDependency": true,
            "allow": ["@js-camp/react/store", "@js-camp/react/store/*"],
            "depConstraints": [
              {
                "sourceTag": "*",
                "onlyDependOnLibsWithTags": ["*"]
              }
            ]
          }
        ]
      }
    }
  ],
  "settings": {
    "react": {
      "version": "detect"
    }
  }
}
